# -*- coding: utf-8 -*-
"""4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15rDOjKYBL0DjmLOEw60zhHsgIJbmJSZK
"""



import random
import math
import matplotlib.pyplot as plt

# 指数分布に従う乱数
def rand_exp(lam):
    u = random.random()  # (0, 1)の乱数を生成
    rnd = -1 / lam * math.log(1 - u)
    return rnd

# シミュレーション関数
def mmss(lam, mu, S, Tend):
    ta = 0  # 客の到着時刻
    td = [0] * S  # 各サーバの利用終了時刻
    n_c = 0  # 到着した客数
    n_l = 0  # ロスした客数

    while ta < Tend:
        # 2.1 客の発生
        ta = ta + rand_exp(lam)  # taを更新
        n_c += 1  # 到着した客数を増やす
        # 2.2 客の受付処理
        for s in range(S):
            if td[s] < ta:
                td[s] = ta + rand_exp(mu)
                break
        else:
            n_l += 1

    return n_l / n_c

# 平均の計算
def mean(data):
    return sum(data) / len(data)

# 標準誤差の計算
def standard_error(data):
    m = mean(data)
    return math.sqrt(sum((x - m) ** 2 for x in data) / (len(data) - 1)) / math.sqrt(len(data))

# 信頼区間の計算
def confidence_interval(data, confidence):
    se = standard_error(data)
    t_critical = stats_t.ppf((1 + confidence) / 2, len(data) - 1)
    h = se * t_critical
    return mean(data), h

# 自作の t 分布のパーセンタイルポイント関数 (ppf)
class stats_t:
    @staticmethod
    def ppf(p, df):
        from scipy.stats import t
        return t.ppf(p, df)

# パラメータの設定
lam_values = [1.0, 2.0, 4.0]  # 客の到着率のリスト
mu = 2.0  # 客のサーバ利用時間が平均 1/mu
S = 5  # サーバの台数
Tend_list = list(range(100, 1001, 100))  # シミュレーション終了時刻のリスト
n_sim = 30  # 各終了時間に対するシミュレーションの回数
confidence_level = 0.95  # 信頼区間の信頼水準

# 信頼区間の計算
M = {lam: [] for lam in lam_values}
conf_intervals = {lam: [] for lam in lam_values}

for lam in lam_values:
    for Tend in Tend_list:
        loss_rates = [mmss(lam, mu, S, Tend) for _ in range(n_sim)]
        mean_loss_rate, h = confidence_interval(loss_rates, confidence_level)
        M[lam].append(mean_loss_rate)
        conf_intervals[lam].append(h)

# グラフの描画
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))

# a) 標本の平均 with errorbar
for lam in lam_values:
    ax1.errorbar(Tend_list, M[lam], yerr=conf_intervals[lam], fmt='o', label=f'λ = {lam}')

# 軸ラベルと凡例の設定
ax1.set_xlabel('Tend')
ax1.set_ylabel('Loss rate')
ax1.legend()
ax1.grid(True)

# b) 横軸: end_time 縦軸: 信頼区間 (棒グラフ)
width = 20  # 棒グラフの幅
for lam in lam_values:
    ax2.bar([t + (lam_values.index(lam) - 1) * width for t in Tend_list], conf_intervals[lam], width=width, label=f'λ = {lam}')

# 軸ラベルと凡例の設定
ax2.set_xlabel('Tend')
ax2.set_ylabel('Confidence Interval')
ax2.legend()
ax2.grid(True)

# グラフの表示と保存
plt.tight_layout()
plt.show()
fig.savefig("comparison.png")